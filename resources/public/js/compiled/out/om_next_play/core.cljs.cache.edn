;; Analyzed by ClojureScript 1.7.145
{:use-macros {async cljs.test, is cljs.test, defui om.next, deftest devcards.core, defcard devcards.core}, :excludes #{}, :name om-next-play.core, :imports nil, :requires {goog.dom goog.dom, dom om.dom, om.dom om.dom, cljs.test cljs.test, datascript.core datascript.core, sablono.core sablono.core, gdom goog.dom, sab sablono.core, om om.next, om.next om.next, d datascript.core}, :uses nil, :defs {Hello {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-next-play.core/Hello, :variadic false, :file "src/om_next_play/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, hello {:name om-next-play.core/hello, :file "src/om_next_play/core.cljs", :line 23, :column 1, :end-line 23, :end-column 11, :meta {:file "/home/philip/git/om-next-play/src/om_next_play/core.cljs", :line 23, :column 6, :end-line 23, :end-column 11}}, p {:name om-next-play.core/p, :file "src/om_next_play/core.cljs", :line 29, :column 1, :end-line 29, :end-column 7, :meta {:file "/home/philip/git/om-next-play/src/om_next_play/core.cljs", :line 29, :column 6, :end-line 29, :end-column 7}}, r {:name om-next-play.core/r, :file "src/om_next_play/core.cljs", :line 34, :column 1, :end-line 34, :end-column 7, :meta {:file "/home/philip/git/om-next-play/src/om_next_play/core.cljs", :line 34, :column 6, :end-line 34, :end-column 7}}, Binder {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-next-play.core/Binder, :variadic false, :file "src/om_next_play/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, binder {:name om-next-play.core/binder, :file "src/om_next_play/core.cljs", :line 52, :column 1, :end-line 52, :end-column 12, :meta {:file "/home/philip/git/om-next-play/src/om_next_play/core.cljs", :line 52, :column 6, :end-line 52, :end-column 12}}, test-indexer {:protocol-inline nil, :meta {:file "/home/philip/git/om-next-play/src/om_next_play/core.cljs", :line 58, :column 10, :end-line 58, :end-column 22}, :name om-next-play.core/test-indexer, :variadic false, :file "src/om_next_play/core.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 58, :end-line 58, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, main {:protocol-inline nil, :meta {:file "/home/philip/git/om-next-play/src/om_next_play/core.cljs", :line 65, :column 7, :end-line 65, :end-column 11, :arglists (quote ([]))}, :name om-next-play.core/main, :variadic false, :file "src/om_next_play/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {dc devcards.core, devcards.core devcards.core, cljs.test cljs.test, om om.next, om.next om.next, dom om.dom, om.dom om.dom, sab sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{om-next-play.core/test-indexer :read :om.next/queries :config :ns :name om-next-play.core :ui->ref :file :reconciler :end-column :type :state :ref->components :column test-indexer :parser :fail nil? :line :quote not :id clojure.core/deref :indexer :expected :end-line :error idxr :pass :indexes :arglists :actual :doc :test :mutate :message :text}, :order [:config :state :indexer :om.next/queries :text :read :mutate :quote :parser :ui->ref :id :reconciler :indexes :ref->components :type :expected :actual :message :error not nil? idxr :pass :fail clojure.core/deref om-next-play.core/test-indexer :ns :name :file :end-column :column :line :end-line :arglists :doc :test om-next-play.core test-indexer]}, :doc nil}